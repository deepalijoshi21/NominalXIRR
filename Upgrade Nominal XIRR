************* Apex Code ****************

public with sharing class CalculateXIRR {

    public GoalxirrData xirrData {get; set;}
    
    private static final boolean DEBUG_GOAL_SEEK = false ;
    private static final Integer GOAL_SEEK_OK     = 0 ;
    private static final Integer GOAL_SEEK_ERROR  = 1 ;

    public CalculateXIRR(){
        xirrData = new GoalxirrData();
        xirrData.guess  = 0.1 ;
        
		xirrData.dates = new List<Date>();
		xirrData.values = new List<Double>();
    }
    
    public void addCashFlow( Date d, Double v ){
    	if( d != NULL && v != NULL ){
    		xirrData.dates.add( d );
    		xirrData.values.add( v );
    	}
    }
    
    
    public Decimal calculate( List<Date> dates, List<Double> values ){

        xirrData.values = values;
        xirrData.dates  = dates;
        
        return xirr(); 
    } 
    
    
    @AuraEnabled
    public static Decimal calculateAura(List<Date> dates, List<Double> values) {
        CalculateXIRR instance = new CalculateXIRR();
        return instance.calculate(dates, values);
    }

    public Decimal xirr(){

        GoalSeekData data = new GoalSeekData() ;
        GoalSeekStatus status;
        
        Double result;
        Double rate0;
        Integer n;
        Integer d_n;
        
        if( xirrData.values.size() < 1 || xirrData.dates.size() != xirrData.values.size() ) return null;
        
        Boolean hasPositive = false;
        Boolean hasNegative = false;
        
        for( Double v : xirrData.values ){
            if( v > 0.0 ) hasPositive = true;
            else if( v < 0.0 ) hasNegative = true;
        }
        
        if( !( hasPositive && hasNegative ) ) return null;
        
        xirrData.n      = xirrData.values.size();
        
        goal_seek_initialize( data ) ;
        data.xmin   = -1;
        data.xmax   = Math.min( 1000, data.xmax ) ;
        rate0       = xirrData.guess ; //argv[2] ? value_get_as_float (argv[2]) : 0.1;        
        
        status = goalSeekNewton( new XIRRNPV(), null, data, xirrData, rate0 ) ;
        
        if (status.seekStatus == GOAL_SEEK_OK)  {
            
            result = Double.valueOf( status.returnData );
        }else{
            result = null;
        }
        
        //     result = ( Decimal.valueOf( ( result != null ) ? (result - 1) : 0 ) * 100 ).setScale(2);
        result = ( Decimal.valueOf( ( result != null ) ? (result - 1) : 0 )).setScale(6);
            
        System.debug( 'XIRR Result = ' + result ) ;

        Double result1 ;

        if (result != null) {
            System.debug('### Result ='+result);
            // Calculate the nominal XIRR using the formula
            Double tempResult = (Double) result;
            System.debug('### tempResult ='+tempResult);

            //tempResult = Math.pow((Double)(1 + tempResult), (Double)(1/12)) ;

            Double num= 1;
            Double deno =12;

            
            Double decimalResult =Decimal.valueOf(num/deno);
            System.debug('Result =='+tempResult);

            Double tempResult2 = Math.pow((Double)(1 + tempResult), decimalResult) ;
            System.debug('Result =='+tempResult2);

            System.debug('Result =='+tempResult2);

            tempResult = tempResult2;
            System.debug('@@@@ tempResult@@@@ ='+tempResult);

            Decimal scaledResult = Decimal.valueOf(tempResult).setScale(6); 
            System.debug('@@@@ tempResult2 @@@@ ='+scaledResult);
            //tempResult -= 1;
            scaledResult -= 1;
            System.debug('@@@@ tempResult2 ='+scaledResult);
            //tempResult *= 12;
            scaledResult *= 12;
            System.debug('&&&&&& tempResult3 ='+scaledResult);
           // result1 = Decimal.valueOf(scaledResult).setScale(6);
            result1 = scaledResult *100;
            System.debug('### Result1 ='+result1);
        }
    
        System.debug('Nominal XIRR Result = ' + result1);
        System.debug('XIRR Result = ' + result);

        return result1;
    }
    
    /**
     *  Seek a goal (root) using Newton's iterative method.
     *
     *  The supplied function must (should) be continously differentiable in
     *  the supplied interval.  If NULL is used for `df', this function will
     *  estimate the derivative.
     *
     *  This method will find a root rapidly provided the initial guess, x0,
     *  is sufficiently close to the root.  (The number of significant digits
     *  (asympotically) goes like i^2 unless the root is a multiple root in
     *  which case it is only like c*i.)
     */
     
    public GoalSeekStatus goalSeekNewton(
                                        XIRRNPV f,
                                        XIRRNPV df,
                                        GoalSeekData data,
                                        GoalxirrData userData, 
                                        double x0 ) {

        Integer iterations;
        double precision = data.precision / 2;
        
        if ( data.have_root )   {
            return new GoalSeekStatus( GOAL_SEEK_OK, Double.valueOf(data.root) );
        }
        
        if ( DEBUG_GOAL_SEEK ) system.debug( '\n\n goalSeekNewton \n\n' ) ;

        
        for (iterations = 0; iterations < 100; iterations++) {
            Double x1 ;
            Double y0 ;
            Double df0 ;
            Double stepsize ;
            GoalSeekStatus status;
            
            if ( DEBUG_GOAL_SEEK ) system.debug( 'goalSeekNewton - x0 = ' + x0 + ', (i = ' + iterations + ' )' ) ;
            
            if ( x0 < data.xmin || x0 > data.xmax ) {
                return new GoalSeekStatus( GOAL_SEEK_ERROR, null );
            }

            status = f.f(x0, userData ) ; //y0, userData) ;

            if ( status.seekStatus != GOAL_SEEK_OK )   {
                return status ;
            }

            y0 = Double.valueOf( status.returnData );
            if ( DEBUG_GOAL_SEEK ) system.debug( '   y0 = ' + y0 );
            
            if ( update_data(x0, y0, data) ){
                return new GoalSeekStatus( GOAL_SEEK_OK, Double.valueOf(data.root) );
            }
            
            if ( df != null ) {
            
                status = df.f( x0, userData ) ;
                
            }else{
                
                Double xstep;
                
                if ( Math.abs(x0) < data.precision ) {
                
                    if (data.havexneg && data.havexpos)
                        xstep = Math.abs(data.xpos - data.xneg) / 1000000;
                    else
                        xstep = (data.xmax - data.xmin) / 1000000;
                        
                }else{
                    xstep = Math.abs(x0) / 1000000;
                }
                
                status = fake_df(f, x0, xstep, data, userData) ;
            }
            
            if( status.seekStatus != GOAL_SEEK_OK ){
                return status;
            }
            
            df0 = Double.valueOf( status.returnData );
            //  If we hit a flat spot, we are in trouble.
            if ( df0 == 0 ) {
                return new GoalSeekStatus( GOAL_SEEK_ERROR, null );
            }       
            
            /*
             * Overshoot slightly to prevent us from staying on
             * just one side of the root.
             */
             
            x1 = x0 - 1.000001 * y0 / df0;
            
            stepsize = Math.abs(x1 - x0) / (Math.abs(x0) + Math.abs(x1)) ;
            
            if ( DEBUG_GOAL_SEEK ) {
                system.debug( '    df0 = ' + df0 ) ;
                system.debug( '   ss = ' + stepsize ) ;
            }
            
            x0 = x1;
            
            if ( stepsize < precision ) {
                data.root = x0;
                data.have_root = true;
                return new GoalSeekStatus( GOAL_SEEK_OK, Double.valueOf(data.root) );
            }
             
        }
        
        return new GoalSeekStatus( GOAL_SEEK_ERROR, null ) ; //GOAL_SEEK_ERROR
    }
    
    /**
     *  Initialize a GoalSeekData object.
     */
    public static void goal_seek_initialize( GoalSeekData data )    {
        data.havexpos = data.havexneg = data.have_root = false;
        data.xpos = data.xneg = data.root = null ; //gnm_nan;
        data.ypos = data.yneg = null ; //gnm_nan ;
        data.xmin = -10000000000.0; //-1e10;
        data.xmax = 10000000000.0; //+1e10;
        data.precision = 0.0000000001; // 1e-10;
    }
    /**
     *
     *  @param x
     *  @param y
     *  @param data
     *  @return
     */
    public static boolean update_data( double x, double y, GoalSeekData data ){
        if (y > 0) {
            if (data.havexpos) {
                if (data.havexneg) {
                    /*
                     *  When we have pos and neg, prefer the new point only
                     *  if it makes the pos-neg x-internal smaller.
                     */
                    if (Math.abs(x - data.xneg) < Math.abs(data.xpos - data.xneg)) {
                        data.xpos = x;
                        data.ypos = y;
                    }
                }
                else if (y < data.ypos) {
                    /* We have pos only and our neg y is closer to zero.  */
                    data.xpos = x;
                    data.ypos = y;
                }
            }
            else {
                data.xpos = x;
                data.ypos = y;
                data.havexpos = true  ;
            }
            return false  ;
        }
        else if (y < 0) {
            if (data.havexneg) {
                if (data.havexpos) {
                    /*
                     * When we have pos and neg, prefer the new point only
                     * if it makes the pos-neg x-internal smaller.
                     */
                    if (Math.abs(x - data.xpos) < Math.abs(data.xpos - data.xneg)) {
                        data.xneg = x;
                        data.yneg = y;
                    }
                }
                else if (-y < -data.yneg) {
                    /* We have neg only and our neg y is closer to zero.  */
                    data.xneg = x;
                    data.yneg = y;
                }

            }
            else {
                data.xneg = x;
                data.yneg = y;
                data.havexneg = true;
            }
            return false  ;
        }
        else {
            /* Lucky guess...  */
            data.have_root = true  ;
            data.root = x  ;
            return true  ;
        }
    }
    
    /*
     *  Calculate a reasonable approximation to the derivative of a function
     *  in a single point.
     */
    public static GoalSeekStatus fake_df( XIRRNPV f, double x,
                                          double xstep, GoalSeekData data,
                                          GoalxirrData userData) {
                                          
        double          xl ;
        double          xr ;
        double          yl ;
        double          yr ;
        double          dfx ;
        GoalSeekStatus  status;
        
        if ( DEBUG_GOAL_SEEK ) system.debug( 'fake_df (x = ' + x +', xstep = ' + xstep + ')' ) ;
        
        xl = x - xstep;
        if (xl < data.xmin)
            xl = x;

        xr = x + xstep;
        if (xr > data.xmax)
            xr = x;

        if (xl == xr) { 
            if ( DEBUG_GOAL_SEEK ) system.debug( '==> xl == xr' ) ;
            return new GoalSeekStatus( GOAL_SEEK_ERROR, null ) ;
        }
        
        status = f.f( xl, userData ) ;
        
        if ( status.seekStatus != GOAL_SEEK_OK ) {
            if ( DEBUG_GOAL_SEEK ) system.debug( '==> failure at xl\n' ) ;
            return status;
        }
        
        yl = Double.valueOf( status.returnData ) ;
        if ( DEBUG_GOAL_SEEK ) system.debug( '==> xl = ' + xl + ' ; yl =' + yl ) ;
        status = f.f( xr, userData ) ;  //yr, userData ) ;
        
        if (status.seekStatus != GOAL_SEEK_OK) {
            if ( DEBUG_GOAL_SEEK ) system.debug( '==> failure at xr' ) ;
            return status;
        }
        
        yr = Double.valueOf( status.returnData ) ;
        if ( DEBUG_GOAL_SEEK ) system.debug( '==> xr = ' + xr + ' ; yr =' + yr ) ;    
        
        dfx = (yr - yl) / (xr - xl) ;
        if ( DEBUG_GOAL_SEEK ) system.debug( '==> ' + dfx ) ;    
                                          
        //return Double.isInfinite(dfx) ?
        //       new GoalSeekStatus( GOAL_SEEK_ERROR, null) :
        //       new GoalSeekStatus( GOAL_SEEK_OK, Double.valueOf(dfx) ) ;
               
               
        return new GoalSeekStatus( GOAL_SEEK_OK, Double.valueOf(dfx) ) ;
    }

    
    public class GoalxirrData {
    
        public Integer          n ;
        public Double       guess ;
        public Double[]     values ;
        public Date[]     dates ;
 
        public GoalxirrData(){}
    }
    
    public class XIRRNPV{
        
        public XIRRNPV() {}
        
        /**
         *
         *  @param rate
         *  @param y
         *  @param userData
         *  @return
         */
        public GoalSeekStatus f( Double rate, GoalxirrData userData ) {
                
            GoalxirrData p;
            Double[]    values ;
            Date[]    dates ;
            Double      sum ;
            Integer         n ;
            
            p       = userData ;
            values  = p.values ;
            dates   = p.dates ;
            n       = p.n ;
            sum     = 0 ;
            
            for ( Integer i = 0; i < n; i++ ) {
            
                double d = dates.get(0).daysBetween( dates.get(i) ); // dates[i] - dates[0];
                
                if ( d < 0 )  {
                    return new GoalSeekStatus( GOAL_SEEK_ERROR, null) ;
                }
                
                sum += values.get(i) / Math.pow(rate, Double.valueOf( d / 365.0 ) ) ; //pow1p( rate, d / 365.0 ) ;
            }
        
            return new GoalSeekStatus( GOAL_SEEK_OK, Double.valueOf( sum ) ) ;
        }

        // public GoalSeekStatus f(Double rate, GoalxirrData userData) {
        //     GoalxirrData p = userData;
        //     Double[] values = p.values;
        //     Date[] dates = p.dates;
        //     Integer n = p.n;
        //     Double sum = 0;
        
        //     for (Integer i = 0; i < n; i++) {
        //         // Calculate the number of months between the cash flow date and the start date
        //         Integer months = dates[i].month() - dates[0].month() +
        //                             12 * (dates[i].year() - dates[0].year());
        
        //         // Calculate the present value of the cash flow using nominal XIRR
        //         sum += values[i] / (Math.pow(1 + rate, Double.valueOf(months / 12.0)));
        //     }
        
        //     return new GoalSeekStatus(GOAL_SEEK_OK, sum);
        // }
                
        

    }
    
    public class GoalSeekData {
    
        public Double   xmin;             /* Minimum allowed values for x.  */
        public Double   xmax;             /* Maximum allowed values for x.  */
        public Double   precision;        /* Desired relative precision.  */
    
        public Boolean  havexpos;        /* Do we have a valid xpos?  */
        public Double   xpos;             /* Value for which f(xpos) > 0.  */
        public Double   ypos;             /* f(xpos).  */
    
        public Boolean  havexneg;        /* Do we have a valid xneg?  */
        public Double   xneg;             /* Value for which f(xneg) < 0.  */
        public Double   yneg;             /* f(xneg).  */
    
        public Boolean  have_root;       /* Do we have a valid root?  */
        public Double   root;             /* Value for which f(root) == 0.  */
        
        public GoalSeekData(){}
    } 

    public class GoalSeekStatus {

        public Integer      seekStatus ;
        public Double   returnData ;
    
        public GoalSeekStatus( Integer pStatus, Double retData ) {
            this.seekStatus = pStatus ;
            this.returnData = retData ;
        }
    
        public Integer getSeekStatus() {
            return seekStatus;
        }
    
        public void setSeekStatus( Integer seekStatus ) {
            this.seekStatus = seekStatus;
        }
    
        public Double getReturnData() {
            return returnData;
        }
    
        public void setReturnData( Double returnData ) {
            this.returnData = returnData;
        }
    
        public String tooString() {
            return 'Status - ' + seekStatus + ', Return Data - ' + returnData ;
        }
    }
}


******************* LWC Code ************

@@@@@@@@@@ HTML Code @@@@@@@@@@@

<!-- XIRRCalculator.html -->
<template>
    <div class="slds-form-element">
        <label for="xirrcalculator" class="slds-form-element__label">XIRR Calculator</label>
        <template if:false={isManualEntrySelected}>
            <lightning-button label="Enter Value Manually" onclick={handleManualEntry}></lightning-button>
            <lightning-button label="Enter Value from Record" onclick={handleRecordEntry} disabled></lightning-button>
        </template>
        <template if:true={isManualEntrySelected}>
            <div class="slds-form-element">
                <template for:each={rows} for:item="row" for:index="index">
                    <div key={row.id} class="slds-grid slds-gutters">
                        <div class="slds-col">
                            <lightning-input type="date" label="Date" value={row.date} onchange={handleDateChange} data-id={row.id}></lightning-input>
                        </div>
                        <div class="slds-col">
                            <lightning-input type="number" label="Value" value={row.value} onchange={handleValueChange} data-id={row.id}></lightning-input>
                        </div>
                        <div class="slds-col">
                            <template if:true={row.isLast}>
                                <lightning-button label="Add Value" onclick={handleAddValue}></lightning-button>
                            </template>
                        </div>
                        <div class="slds-col">
                            <lightning-button label="Delete" onclick={handleDelete} data-id={row.id}></lightning-button>
                        </div>
                    </div>
                </template>
                <lightning-button label="Calculate XIRR" onclick={handleCalculate}></lightning-button>
                <p if:true={result}>XIRR Result: {result}</p>
            </div>
        </template>
    </div>
</template>

@@@@@@@@@@@@ JS Code @@@@@@@@@@@@@@@@

import { LightningElement, track, api } from 'lwc';
import calculateXIRR from '@salesforce/apex/CalculateXIRR.calculateAura';
import { updateRecord, getRecordNotifyChange } from 'lightning/uiRecordApi';
import NOMINAL_FIELD from '@salesforce/schema/Opportunity.Nominal_XIRR__c';
import ID_FIELD from '@salesforce/schema/Opportunity.Id';


export default class XIRRCalculator extends LightningElement {
    @track dates = [];
    @track values = [];
    @track result;

    @api recordId;

    @track rows = [{ id: 0, date: '', value: '', isLast: true }];

    @track isManualEntrySelected = false;

    handleManualEntry() {
        this.isManualEntrySelected = true;
    }

    connectedCallback() {
        console.log('3453464dhdgdjh');
        console.log('Record Id ######= ',this.recordId);
    }


    handleAddValue() {
        // Get the last row
        const lastRow = this.rows[this.rows.length - 1];
    
        // Add the date and value of the last row to the respective arrays
        this.dates.push(lastRow.date);
        this.values.push(lastRow.value);
    
        // Add a new row to the rows array
        const id = this.rows.length;
        this.rows = [...this.rows, { id, date: '', value: '', isLast: true }];
        this.rows[id - 1].isLast = false;
    
        // No need to clear the input fields as they are bound to the row object
    }
    

    handleDateChange(event) {
        const id = event.target.dataset.id;
        this.rows[id].date = event.target.value;
    }

    handleValueChange(event) {
        const id = event.target.dataset.id;
        this.rows[id].value = event.target.value;
    }

    handleDelete(event) {
        const id = event.target.dataset.id;
        this.rows = this.rows.filter(row => row.id != id);
        if (this.rows.length > 0) {
            this.rows[this.rows.length - 1].isLast = true;
        }
    }

    handleCalculate() {
        // Extract the dates and values from the rows array
        const dates = this.rows.map(row => row.date);
        const values = this.rows.map(row => row.value);
    
        calculateXIRR({dates, values})
            .then(result => {
                this.result = result;
                console.log('result: ' , this.result);
                let recordInput = {
                    fields: {
                        [ID_FIELD.fieldApiName]: this.recordId,
                        [NOMINAL_FIELD.fieldApiName]: this.result
                    },
                };
                console.log('Result Type =', typeof this.result);
    
                console.log('recordInput: ', recordInput);
                updateRecord(recordInput)
                    .then(() => {
                        console.log('Record Updated : ');
                    })
                    .catch(error => {
                        console.log('Error Updating record : ', error);
                    });
    
            })
            .catch(error => {
                console.error('Error calculating XIRR:', error);
            });
    }
    
}

@@@@@@@@@@@@ XML Code @@@@@@@@@@@@

<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__RecordPage</target>
        <target>lightning__HomePage</target>
    </targets>
</LightningComponentBundle>
